import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from collections import Counter
import re
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import base64
import os
import datetime

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –î–ù–ö", layout="wide")

@st.cache_data
def calculate_gc_content(sequence):
    if not sequence:
        return 0
    gc_count = sequence.count('G') + sequence.count('C')
    return (gc_count / len(sequence)) * 100

@st.cache_data
def extract_sequence_features(df):
    features = []
    for idx, row in df.iterrows():
        seq = row['sequence']
        length = len(seq)
        
        features.append({
            'seq_id': idx,
            'class': row['class'],
            'length': length,
            'gc_content': calculate_gc_content(seq),
            'a_freq': seq.count('A') / length,
            't_freq': seq.count('T') / length,
            'g_freq': seq.count('G') / length,
            'c_freq': seq.count('C') / length,
            'cpg_count': len(re.findall('CG', seq))
        })
    
    return pd.DataFrame(features)

@st.cache_data
def analyze_kmers(sequences, k, max_samples=50):
    """–ê–Ω–∞–ª–∏–∑ k-–º–µ—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    sample_size = min(max_samples, len(sequences))
    samples = np.random.choice(sequences, sample_size, replace=False)
    
    kmer_counts = Counter()
    for seq in samples:
        for i in range(len(seq) - k + 1):
            kmer = seq[i:i+k]
            kmer_counts[kmer] += 1
            
    return pd.DataFrame(kmer_counts.most_common(20), columns=['k-–º–µ—Ä', '—á–∞—Å—Ç–æ—Ç–∞'])

def get_csv_download_link(dataframe, filename="data.csv"):
    csv = dataframe.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    return f'<a href="data:file/csv;base64,{b64}" download="{filename}">–°–∫–∞—á–∞—Ç—å CSV</a>'

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üß¨ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –î–ù–ö")
st.markdown("""
### –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ê–Ω–∞–ª–∏–∑ GC-—Å–æ—Å—Ç–∞–≤–∞
- –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ CpG-–æ—Å—Ç—Ä–æ–≤–∫–æ–≤
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –î–ù–ö")
upload_tab, select_tab = st.tabs(["–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", "–í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"])

with upload_tab:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –î–ù–ö (txt)", type=['txt'])
    
    if uploaded_file:
        try:
            df_new = pd.read_csv(uploaded_file, sep='\t')
            if 'sequence' in df_new.columns and 'class' in df_new.columns:
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"dna_sequences_{timestamp}.txt"
                os.makedirs("data", exist_ok=True)
                df_new.to_csv(os.path.join("data", filename), sep='\t', index=False)
                st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {filename}")
            else:
                st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'sequence' –∏ 'class'")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

with select_tab:
    data_folder = "data"
    available_files = [f for f in os.listdir(data_folder) if f.endswith('.txt')]
    selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", available_files)

if selected_file:
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –î–ù–ö..."):
        df = pd.read_table(os.path.join(data_folder, selected_file))
        features_df = extract_sequence_features(df)
        st.success(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.header("–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º")
        class_counts = features_df['class'].value_counts().reset_index()
        class_counts.columns = ['–ö–ª–∞—Å—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        fig_class = px.bar(class_counts, x='–ö–ª–∞—Å—Å', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        st.plotly_chart(fig_class)
    
    with col2:
        st.subheader("GC-—Å–æ—Å—Ç–∞–≤")
        fig_gc = px.box(features_df, x='class', y='gc_content', 
                       labels={'class': '–ö–ª–∞—Å—Å', 'gc_content': 'GC-—Å–æ—Å—Ç–∞–≤ (%)'})
        st.plotly_chart(fig_gc)

    # –ê–Ω–∞–ª–∏–∑ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤
    st.header("–ê–Ω–∞–ª–∏–∑ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞")
    nucleotide_data = features_df.groupby('class')[['a_freq', 't_freq', 'g_freq', 'c_freq']].mean()
    nucleotide_data.columns = ['A', 'T', 'G', 'C']
    
    fig_nuc = px.imshow(nucleotide_data, 
                        labels=dict(x='–ù—É–∫–ª–µ–æ—Ç–∏–¥', y='–ö–ª–∞—Å—Å', color='–ß–∞—Å—Ç–æ—Ç–∞'),
                        color_continuous_scale='Viridis')
    st.plotly_chart(fig_nuc)

    # PCA –∞–Ω–∞–ª–∏–∑
    st.header("–ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
    features_for_pca = ['length', 'gc_content', 'a_freq', 't_freq', 'g_freq', 'c_freq', 'cpg_count']
    
    scaler = StandardScaler()
    pca = PCA(n_components=2)
    pca_result = pca.fit_transform(scaler.fit_transform(features_df[features_for_pca]))
    
    pca_df = pd.DataFrame({
        'PC1': pca_result[:, 0],
        'PC2': pca_result[:, 1],
        '–ö–ª–∞—Å—Å': features_df['class']
    })
    
    fig_pca = px.scatter(pca_df, x='PC1', y='PC2', color='–ö–ª–∞—Å—Å',
                        title=f'PCA (–æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è: {pca.explained_variance_ratio_[0]:.2f}, {pca.explained_variance_ratio_[1]:.2f})')
    st.plotly_chart(fig_pca)

    # K-–º–µ—Ä –∞–Ω–∞–ª–∏–∑
    st.header("–ê–Ω–∞–ª–∏–∑ k-–º–µ—Ä–æ–≤")
    k = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä k-–º–µ—Ä–∞", min_value=2, max_value=8, value=3, step=1)
    
    selected_class = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ k-–º–µ—Ä–æ–≤:",
        options=sorted(df['class'].unique()),
        key="kmer_class_select"
    )
    
    class_seqs = df[df['class'] == selected_class]['sequence'].values
    kmer_results = analyze_kmers(class_seqs, k)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è k-–º–µ—Ä–æ–≤
    fig_kmer = px.bar(
        kmer_results,
        x='k-–º–µ—Ä',
        y='—á–∞—Å—Ç–æ—Ç–∞',
        title=f'–¢–æ–ø-20 {k}-–º–µ—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ {selected_class}'
    )
    st.plotly_chart(fig_kmer)
    st.dataframe(kmer_results)

    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    st.header("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    st.markdown(get_csv_download_link(features_df, "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–∞–Ω–∞–ª–∏–∑–∞.csv"), unsafe_allow_html=True)

else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ –î–ù–ö –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
    st.subheader("–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞")
    sample_format = pd.DataFrame({
        'sequence': ['ATGCCCCAACTAAATACTACCGTATGGCC', 'ATGAACGAAAATCTGTTCGCTTCATTCAT'],
        'class': [0, 1]
    })
    st.dataframe(sample_format)

# –°–ø—Ä–∞–≤–∫–∞
st.sidebar.header("–°–ø—Ä–∞–≤–∫–∞")
st.sidebar.markdown("""
### –ù—É–∫–ª–µ–æ—Ç–∏–¥—ã –î–ù–ö:
- **A (–ê–¥–µ–Ω–∏–Ω)**: –ü—É—Ä–∏–Ω–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–∑—É–µ—Ç –ø–∞—Ä—É —Å T
- **T (–¢–∏–º–∏–Ω)**: –ü–∏—Ä–∏–º–∏–¥–∏–Ω–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–∑—É–µ—Ç –ø–∞—Ä—É —Å A
- **G (–ì—É–∞–Ω–∏–Ω)**: –ü—É—Ä–∏–Ω–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–∑—É–µ—Ç –ø–∞—Ä—É —Å C
- **C (–¶–∏—Ç–æ–∑–∏–Ω)**: –ü–∏—Ä–∏–º–∏–¥–∏–Ω–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–∑—É–µ—Ç –ø–∞—Ä—É —Å G

### –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á–∞—Å—Ç–∫–æ–≤ –î–ù–ö:
- **–ö–ª–∞—Å—Å 0**: –≠–∫–∑–æ–Ω—ã - –∫–æ–¥–∏—Ä—É—é—â–∏–µ —É—á–∞—Å—Ç–∫–∏ –≥–µ–Ω–æ–≤, –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–ª–∫–∞
- **–ö–ª–∞—Å—Å 1**: –ò–Ω—Ç—Ä–æ–Ω—ã - –Ω–µ–∫–æ–¥–∏—Ä—É—é—â–∏–µ —É—á–∞—Å—Ç–∫–∏ –≥–µ–Ω–æ–≤, —É–¥–∞–ª—è–µ–º—ã–µ –ø—Ä–∏ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏–∏ –†–ù–ö
- **–ö–ª–∞—Å—Å 2**: –ü—Ä–æ–º–æ—Ç–æ—Ä—ã - —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
- **–ö–ª–∞—Å—Å 3**: –≠–Ω—Ö–∞–Ω—Å–µ—Ä—ã - —É—Å–∏–ª–∏—Ç–µ–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–µ–Ω–æ–≤
- **–ö–ª–∞—Å—Å 4**: CpG-–æ—Å—Ç—Ä–æ–≤–∫–∏ - —É—á–∞—Å—Ç–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º CG, —á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–≥—É–ª—è—Ü–∏–µ–π –≥–µ–Ω–æ–≤
- **–ö–ª–∞—Å—Å 5**: –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã - –º–æ–±–∏–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –ø–æ–≤—Ç–æ—Ä—ã
- **–ö–ª–∞—Å—Å 6**: –ú–µ–∂–≥–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ - –Ω–µ–∫–æ–¥–∏—Ä—É—é—â–∏–µ –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É –≥–µ–Ω–∞–º–∏

### –û –ø—Ä–æ–≥—Ä–∞–º–º–µ:
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –î–ù–ö
""")